CONSULTPRO WEBSITE CODE AND SETUP INSTRUCTIONS
=============================================

1. PROJECT STRUCTURE
-------------------
The project consists of the following main files:

src/
  ├── App.tsx
  ├── index.css
  ├── main.tsx
  ├── translations.ts
  └── contexts/
      └── LanguageContext.tsx

2. DEPENDENCIES (package.json)
----------------------------
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "framer-motion": "^11.0.8",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

3. MAIN COMPONENT (App.tsx)
--------------------------
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Brain, Mail, MessageSquare, ArrowRight, Building2, Code, Globe2, Notebook, Languages } from 'lucide-react';
import { useLanguage } from './contexts/LanguageContext';
import { translations } from './translations';

interface FormData {
  name: string;
  email: string;
  message: string;
}

type Language = 'en' | 'fr';

function App() {
  const { language, setLanguage } = useLanguage();
  const t = translations[language as keyof typeof translations];
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    message: ''
  });

  const fadeIn = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.6 }
  };

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const toggleLanguage = () => {
    setLanguage(language === 'en' ? 'fr' : 'en');
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev: FormData) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
    setFormData({ name: '', email: '', message: '' });
  };

  return (
    <div className="min-h-screen bg-[#0f0f0f] text-white">
      {/* Navigation */}
      <nav className="fixed w-full z-50 bg-[#0f0f0f]/80 backdrop-blur-sm" role="navigation" aria-label="Main navigation">
        <div className="container mx-auto px-6 py-4 flex justify-between items-center">
          <motion.div 
            className="flex items-center space-x-2"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Brain className="h-8 w-8 text-[#4ecdc4]" aria-hidden="true" />
            <span className="text-xl font-bold gradient-text">ConsultPro</span>
          </motion.div>
          <motion.div 
            className="flex items-center space-x-8"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <div className="hidden md:flex space-x-8">
              <a href="#services" className="hover:text-[#4ecdc4] transition-colors" aria-label={t.nav.services}>{t.nav.services}</a>
              <a href="#expertise" className="hover:text-[#4ecdc4] transition-colors" aria-label={t.nav.expertise}>{t.nav.expertise}</a>
              <a href="#contact" className="hover:text-[#4ecdc4] transition-colors" aria-label={t.nav.contact}>{t.nav.contact}</a>
            </div>
            <button
              onClick={toggleLanguage}
              className="flex items-center space-x-2 px-4 py-2 rounded-full gradient-border"
              aria-label={`Switch to ${language === 'en' ? 'French' : 'English'}`}
            >
              <Languages className="h-5 w-5" aria-hidden="true" />
              <span>{language.toUpperCase()}</span>
            </button>
          </motion.div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="min-h-screen flex items-center pt-20" aria-labelledby="hero-title">
        <div className="container mx-auto px-6">
          <motion.div
            className="max-w-4xl mx-auto text-center"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h1 id="hero-title" className="text-6xl md:text-7xl font-bold mb-8">
              <span className="gradient-text">{t.hero.title}</span>
            </h1>
            <p className="text-xl text-gray-400 mb-12 leading-relaxed">
              {t.hero.subtitle}
            </p>
            <motion.button
              className="gradient-border rounded-full inline-block"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              aria-label={t.hero.cta}
            >
              <div className="px-8 py-3 rounded-full flex items-center space-x-2">
                <span>{t.hero.cta}</span>
                <ArrowRight className="w-5 h-5" aria-hidden="true" />
              </div>
            </motion.button>
          </motion.div>
        </div>
      </section>

      {/* Services Section */}
      <section id="services" className="py-32" aria-labelledby="services-title">
        <div className="container mx-auto px-6">
          <motion.div
            className="text-center mb-20"
            variants={fadeIn}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
          >
            <h2 id="services-title" className="text-4xl font-bold mb-4">{t.services.title}</h2>
            <p className="text-gray-400 max-w-2xl mx-auto">
              {t.services.subtitle}
            </p>
          </motion.div>

          <motion.div 
            className="grid md:grid-cols-3 gap-8"
            variants={staggerContainer}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
          >
            {[
              {
                icon: Building2,
                title: t.services.aec.title,
                description: t.services.aec.description
              },
              {
                icon: Code,
                title: t.services.pm.title,
                description: t.services.pm.description
              },
              {
                icon: Notebook,
                title: t.services.digital.title,
                description: t.services.digital.description
              }
            ].map((service, index) => (
              <motion.div
                key={index}
                className="gradient-border rounded-2xl p-[1px]"
                variants={fadeIn}
              >
                <div className="bg-[#0f0f0f] p-8 rounded-2xl h-full">
                  <service.icon className="h-12 w-12 text-[#4ecdc4] mb-6" aria-hidden="true" />
                  <h3 className="text-xl font-bold mb-4">{service.title}</h3>
                  <p className="text-gray-400">{service.description}</p>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Expertise Section */}
      <section id="expertise" className="py-32" aria-labelledby="expertise-title">
        <div className="container mx-auto px-6">
          <motion.div
            className="text-center mb-20"
            variants={fadeIn}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
          >
            <h2 id="expertise-title" className="text-4xl font-bold mb-4">{t.expertise.title}</h2>
            <p className="text-gray-400 max-w-2xl mx-auto">
              {t.expertise.subtitle}
            </p>
          </motion.div>

          <motion.div 
            className="grid md:grid-cols-4 gap-8"
            variants={staggerContainer}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
          >
            {[
              { icon: Building2, title: t.expertise.architecture, count: '50+' },
              { icon: Code, title: t.expertise.engineering, count: '100+' },
              { icon: Notebook, title: t.expertise.digital, count: '75+' },
              { icon: Globe2, title: t.expertise.global, count: '60+' }
            ].map((item, index) => (
              <motion.div
                key={index}
                className="gradient-border rounded-2xl p-[1px]"
                variants={fadeIn}
              >
                <div className="bg-[#0f0f0f] p-6 rounded-2xl text-center">
                  <item.icon className="h-12 w-12 mx-auto text-[#4ecdc4] mb-4" aria-hidden="true" />
                  <h3 className="text-xl font-bold mb-2">{item.title}</h3>
                  <p className="text-[#4ecdc4] font-bold">{item.count} {t.expertise.projects}</p>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="py-32" aria-labelledby="contact-title">
        <div className="container mx-auto px-6">
          <motion.div
            className="max-w-4xl mx-auto"
            variants={fadeIn}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
          >
            <div className="text-center mb-20">
              <h2 id="contact-title" className="text-4xl font-bold mb-4">{t.contact.title}</h2>
              <p className="text-gray-400">{t.contact.subtitle}</p>
            </div>

            <div className="grid md:grid-cols-2 gap-12">
              <div className="space-y-6">
                <h3 className="text-2xl font-bold mb-6">{t.contact.info}</h3>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <Mail className="h-6 w-6 text-[#4ecdc4]" aria-hidden="true" />
                    <a href="mailto:contact@consultpro.com" className="hover:text-[#4ecdc4] transition-colors">
                      contact@consultpro.com
                    </a>
                  </div>
                  <div className="flex items-center space-x-4">
                    <MessageSquare className="h-6 w-6 text-[#4ecdc4]" aria-hidden="true" />
                    <span>{t.contact.schedule}</span>
                  </div>
                </div>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="gradient-border rounded-2xl">
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder={t.contact.form.name}
                    className="w-full px-4 py-3 rounded-2xl"
                    required
                  />
                </div>
                <div className="gradient-border rounded-2xl">
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder={t.contact.form.email}
                    className="w-full px-4 py-3 rounded-2xl"
                    required
                  />
                </div>
                <div className="gradient-border rounded-2xl">
                  <textarea
                    name="message"
                    value={formData.message}
                    onChange={handleInputChange}
                    placeholder={t.contact.form.message}
                    rows={4}
                    className="w-full px-4 py-3 rounded-2xl"
                    required
                  ></textarea>
                </div>
                <motion.button
                  type="submit"
                  className="gradient-border rounded-full inline-block"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <div className="px-8 py-3 rounded-full">
                    <span>{t.contact.form.send}</span>
                  </div>
                </motion.button>
              </form>
            </div>
          </motion.div>
        </div>
      </section>
    </div>
  );
}

export default App;

4. STYLES (index.css)
--------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-[#0f0f0f] text-white;
  }
}

.gradient-text {
  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.gradient-border {
  position: relative;
  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
  border-radius: 1.5rem;
}

.gradient-border::before {
  content: '';
  position: absolute;
  inset: 1px;
  background: #0f0f0f;
  border-radius: 1.5rem;
  z-index: -1;
}

.gradient-border > * {
  position: relative;
  z-index: 1;
}

/* Form input styles */
.gradient-border input,
.gradient-border textarea {
  background: transparent;
  border: none;
  width: 100%;
  color: white;
  border-radius: 1.5rem;
}

.gradient-border input:focus,
.gradient-border textarea:focus {
  outline: none;
}

.gradient-border input::placeholder,
.gradient-border textarea::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

/* Additional rounded corners for specific elements */
.rounded-2xl {
  border-radius: 1.5rem !important;
}

.rounded-lg {
  border-radius: 1rem !important;
}

.rounded-full {
  border-radius: 9999px !important;
}

5. SETUP INSTRUCTIONS
--------------------
1. Install Node.js:
   - Download from https://nodejs.org/
   - Install the LTS version
   - Restart your computer

2. Create project directory:
   mkdir consultpro-clone
   cd consultpro-clone

3. Initialize project:
   npm init -y

4. Install dependencies:
   npm install react react-dom framer-motion lucide-react
   npm install --save-dev typescript @types/react @types/react-dom @vitejs/plugin-react vite tailwindcss postcss autoprefixer

5. Create the file structure as shown above

6. Copy the code into respective files

7. Start the development server:
   npm run dev

8. View the website:
   Open http://localhost:5173 in your browser

6. FEATURES
----------
- Modern, responsive design
- Multi-language support (English/French)
- Smooth animations with Framer Motion
- Gradient effects and rounded corners
- Contact form with validation
- Mobile-friendly layout
- Accessibility features

7. CUSTOMIZATION
---------------
You can customize the website by:
1. Changing colors in index.css (gradient colors)
2. Modifying text content in translations.ts
3. Adjusting border radius in index.css
4. Adding new sections in App.tsx

8. TROUBLESHOOTING
-----------------
If you encounter issues:
1. Make sure Node.js is installed correctly
2. Check if all dependencies are installed
3. Clear npm cache: npm cache clean --force
4. Delete node_modules and reinstall: npm install
5. Check console for error messages

9. LICENSE
----------
This project is licensed under the MIT License. 